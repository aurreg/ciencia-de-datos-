# cambia idioma de la consola de R a español:
Sys.setenv(LANG="es")
# usar 2 cifras significativas y tiende a evitar
# notación científica (ver ayuda de función: `options`):
options(digits = 2, scipen = 999)
# cargar librerías:
# Cargar librerías y suprimir mensajes y advertencias individualmente
suppressMessages(suppressWarnings(library(FactoClass)))
suppressMessages(suppressWarnings(library(Factoshiny)))
suppressMessages(suppressWarnings(library(factoextra)))
suppressMessages(suppressWarnings(library(plotly)))
suppressMessages(suppressWarnings(library(dplyr)))
suppressMessages(suppressWarnings(library(readxl)))
suppressMessages(suppressWarnings(library(ggplot2)))
suppressMessages(suppressWarnings(library(knitr)))
suppressMessages(suppressWarnings(library(htmlwidgets)))
suppressMessages(suppressWarnings(library(ggpubr)))
datos <- read_excel("SUPPPORT2.xlsx")
datos<-datos%>%mutate(num.co=case_when(num.co>=4~ '4+',
TRUE ~ as.character(num.co)
))
datos[,c(2,3,4,5,7,13,19,20,21,24,40,41,43,44,45)]<-lapply(datos[,c(2,3,4,5,7,13,19,20,21,24,40,41,43,44,45)],as.factor)
datos
datos<-datos%>%mutate(dzgroup=case_when(dzgroup=="Lung Cancer"~ 'L.C',
dzgroup=="Cirrhosis"~ 'C',
dzgroup=="ARF/MOSF w/Sepsis"~ 'A.M.S',
dzgroup=="Coma"~ 'Coma',
dzgroup=="CHF"~ 'CHF',
dzgroup=="Colon Cancer"~ 'C.C',
dzgroup=="COPD"~ 'COPD',
dzgroup=="MOSF w/Malig"~ 'M.M',
T~'NA'
))
datos<-datos%>%mutate(dzclass=case_when(dzclass=="ARF/MOSF"~ 'A.M',
dzclass=="Cancer"~ 'C',
dzclass=="Coma"~ 'Coma',
T~'C.C.C'
))
datos<-datos%>%mutate(race=case_when(race=="white"~ 'W',
T~'O'
))
datos<-datos%>%mutate(dementia=case_when(dementia==1~ 'yes',
T~'no'
))
datos<-datos%>%mutate(diabetes=case_when(diabetes==1~ 'yes',
T~'no'
))
datos<-datos%>%mutate(dnr=case_when(dnr=='dnr after sadm'~ 'yes',
dnr=='dnr before sadm'~ 'yes',
T~'no'
))
datos<-datos%>%mutate(death=case_when(death==1~ 'yes',
T~'no'
))
datos<-datos%>%mutate(hospdead=case_when(hospdead==1~ 'yes',
T~'no'
))
datos[,c(2,3,4,5,7,13,19,20,21,24,40,41,43,44,45)]<-lapply(datos[,c(2,3,4,5,7,13,19,20,21,24,40,41,43,44,45)],as.factor)
outlier_count <- function(column) {
if (is.numeric(column)) { # Verificar si la columna es numérica
Q1 <- quantile(column, 0.25, na.rm = TRUE)  # Primer cuartil
Q3 <- quantile(column, 0.75, na.rm = TRUE)  # Tercer cuartil
IQR <- Q3 - Q1  # Rango intercuartil
lower_bound <- Q1 - 1.5 * IQR  # Límite inferior
upper_bound <- Q3 + 1.5 * IQR  # Límite superior
return(sum(column < lower_bound | column > upper_bound, na.rm = TRUE))
} else {
return(0)  # Si no es numérico, no hay atípicos
}
}
colores <- rep(c("red","blue","yellow","pink","green","orange"),5)
par(mfrow=c(2,3), mai=c(0.3,0.4,0.3,0.1), las=1, bty="n")
for(i in # Encuentra las posiciones de las columnas
match(c("age", "avtisst", "surv2m", "surv6m", "meanbp", "hrt", "temp"), names(datos))) boxplot(datos[,i], main=names(datos)[i], col=colores[i])
sapply(datos[,-c(2,3,4,5,7,13,19,20,21,24,40,41,43,44,45)], outlier_count)
res.PCA<-PCA(datos,quali.sup=c(2,3,4,5,7,13,19,20,21,24,40,41,43,44,45),quanti.sup=c(6,9,10,11,14,15,18,22,23,25,27,29,31,32,33,34,35,36,37,38,39,42),graph=FALSE)
barplot(res.PCA$eig[,1]/sum(res.PCA$eig[,1]))
cumsum(res.PCA$eig[,1]/sum(res.PCA$eig[,1]))
fviz_contrib(res.PCA, choice = "var", axes = 1)
fviz_contrib(res.PCA, choice = "var", axes = 2)
fviz_contrib(res.PCA, choice = "var", axes = 3)
fviz_contrib(res.PCA, choice = "var", axes = 4)
umbral_cos2 <- 0.2
# Filtrar las variables según su cos2
variables_filtradas <- rownames(res.PCA$var$cos2)[apply(res.PCA$var$cos2[,c(1,2)], 1, sum) >= umbral_cos2]
# Filtrar las variables según su cos2
variables_filtradas2 <- rownames(res.PCA$quanti.sup$cos2)[apply(res.PCA$quanti$cos2[,c(1,2)], 1, sum) >= umbral_cos2]
variables_filtradas<-c(variables_filtradas,variables_filtradas2)
fviz_pca_var(res.PCA, axes=c(1,2), col.var="cos2",
select.var = list(name =variables_filtradas),
gradient.cols = c("darkred",
"darkorange",
"darkgreen"))
umbral_cos2 <- 0.2
# Filtrar las variables según su cos2
variables_filtradas <- rownames(res.PCA$var$cos2)[apply(res.PCA$var$cos2[,c(1,3)], 1, sum) >= umbral_cos2]
# Filtrar las variables según su cos2
variables_filtradas2 <- rownames(res.PCA$quanti.sup$cos2)[apply(res.PCA$quanti$cos2[,c(1,3)], 1, sum) >= umbral_cos2]
variables_filtradas<-c(variables_filtradas,variables_filtradas2)
fviz_pca_var(res.PCA, axes=c(1,3), col.var="cos2",
select.var = list(name =variables_filtradas),
gradient.cols = c("darkred",
"darkorange",
"darkgreen"))
umbral_cos2 <- 0.2
# Filtrar las variables según su cos2
variables_filtradas <- rownames(res.PCA$var$cos2)[apply(res.PCA$var$cos2[,c(1,4)], 1, sum) >= umbral_cos2]
# Filtrar las variables según su cos2
variables_filtradas2 <- rownames(res.PCA$quanti.sup$cos2)[apply(res.PCA$quanti$cos2[,c(1,4)], 1, sum) >= umbral_cos2]
variables_filtradas<-c(variables_filtradas,variables_filtradas2)
fviz_pca_var(res.PCA, axes=c(1,4), col.var="cos2",
select.var = list(name =variables_filtradas),
gradient.cols = c("darkred",
"darkorange",
"darkgreen"))
umbral <- 3
quali.sup <- as.data.frame(res.PCA$quali.sup$coord[apply(abs(res.PCA$quali.sup$v.test[,c(1,2)]), 1, max) >= umbral,])
quali.sup$name <- rownames(res.PCA$quali.sup$cos2)[apply(abs(res.PCA$quali.sup$v.test[,c(1,2)]), 1, max) >= umbral]
# Plot
ggscatter(quali.sup, x = "Dim.1", y = "Dim.2", label = "name",
ylim = c(-2.5, 2.5), xlim = c(-2.5, 2.5),
ggtheme = theme_minimal()
)+
geom_vline(xintercept = 0, linetype = "dashed")+
geom_hline(yintercept = 0, linetype = "dashed")
res.PCA$quali.sup$v.test
res.PCA$quali.sup$coord
plot.PCA(res.PCA, axes = c(1,2),label =c('none'),choix = c("ind"))
plot.PCA(res.PCA, axes = c(1,3),label =c('none'),choix = c("ind"))
plot.PCA(res.PCA, axes = c(1,4),label =c('none'),choix = c("ind"))
summary(datos[,c(2,3,4,5,7,13,19,20,21,24,40,41,43,44,45)])
library("FactoMineR")
acm <- MCA(datos,quanti.sup=c(1,6,8,9,10,11,12,14,15,16,17,18,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42),quali.sup=c(3,40,41,45),graph=FALSE)
barplot(acm$eig[,1])
s <- 11 # poner el numero de activas que hicieron los planos
l <- acm$eig[acm$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100
barplot(ptau, col="darkred", ylim = c(0,75))
fviz_contrib(acm, choice = "var", axes = 1)
fviz_contrib(acm, choice = "var", axes = 2)
fviz_contrib(acm, choice = "var", axes = 3)
# Establecer un umbral mínimo de calidad de representación
umbral_cos2 <- 0.2
# Filtrar las variables según su cos2
variables_filtradas <- rownames(acm$var$cos2)[apply(acm$var$cos2[,c(1,2)], 1, sum) >= umbral_cos2]
# Crear un gráfico solo con las variables seleccionadas
fviz_mca_var(acm, axes = c(1, 2), col.var = "cos2", repel = TRUE,
select.var = list(name = variables_filtradas),
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
ggtheme = theme_minimal())
# Filtrar las variables según su cos2 en los ejes seleccionados (1 y 3)
umbral_cos2 <- 0.15
variables_filtradas <- rownames(acm$var$cos2)[apply(acm$var$cos2[,c(1,3)], 1, sum) >= umbral_cos2]
# Crear un gráfico solo con las variables seleccionadas
fviz_mca_var(acm, axes = c(1, 3), col.var = "cos2", repel = TRUE,
select.var = list(name = variables_filtradas),
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
ggtheme = theme_minimal())
plot.MCA(acm, choix='quanti.sup',title="Supplementary quantitatives variables")
plot.MCA(acm, axes = c(1, 3),choix='quanti.sup',title="Supplementary quantitatives variables")
fviz_mca_var(acm, axes = c(1,2),
choice = "mca.cor", repel = TRUE,
ggtheme = theme_minimal())
fviz_mca_var(acm, axes = c(1,3),
choice = "mca.cor", repel = TRUE,
ggtheme = theme_minimal())
plot.MCA(acm,label ='none')
plot.MCA(acm, axes = c(1,3),label =c('none'))
# poner 1000}
res.HCPC<-HCPC(acm,nb.clust=3,kk=1000,consol=FALSE,graph=FALSE)
plot.HCPC(res.HCPC,choice='tree',title='Hierarchical tree')
plot.HCPC(res.HCPC,choice='map',draw.tree=FALSE,title='Factor map',ind.names=F,axes=c(1,2))
plot.HCPC(res.HCPC,choice='map',draw.tree=FALSE,title='Factor map',ind.names=F,axes=c(1,3))
round(res.HCPC$desc.var$category$`1`,3)
round(res.HCPC$desc.var$category$`2`,3)
round(res.HCPC$desc.var$category$`3`,3)
# cambia idioma de la consola de R a español:
Sys.setenv(LANG="es")
# usar 2 cifras significativas y tiende a evitar
# notación científica (ver ayuda de función: `options`):
options(digits = 2, scipen = 999)
# cargar librerías:
# Cargar librerías y suprimir mensajes y advertencias individualmente
suppressMessages(suppressWarnings(library(FactoClass)))
suppressMessages(suppressWarnings(library(Factoshiny)))
suppressMessages(suppressWarnings(library(factoextra)))
suppressMessages(suppressWarnings(library(plotly)))
suppressMessages(suppressWarnings(library(dplyr)))
suppressMessages(suppressWarnings(library(readxl)))
suppressMessages(suppressWarnings(library(ggplot2)))
suppressMessages(suppressWarnings(library(knitr)))
suppressMessages(suppressWarnings(library(htmlwidgets)))
suppressMessages(suppressWarnings(library(ggpubr)))
setwd("C:/Users/a/Downloads")
datos <- read_excel("SUPPPORT2.xlsx")
datos<-datos%>%mutate(num.co=case_when(num.co>=4~ '4+',
TRUE ~ as.character(num.co)
))
datos[,c(2,3,4,5,7,13,19,20,21,24,40,41,43,44,45)]<-lapply(datos[,c(2,3,4,5,7,13,19,20,21,24,40,41,43,44,45)],as.factor)
datos
